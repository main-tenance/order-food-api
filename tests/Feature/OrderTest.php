<?php

namespace Tests\Feature;

use App\Http\Routes\ApiRoutesProvider;
use App\Models\Dish;
use App\Models\Order;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\Generators\OrderGenerator;
use Tests\TestCase;

/**
 * @group api
 */
class OrderTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    private array $data;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->data = OrderGenerator::getData();
    }

    /**
     * @group index
     */
    public function testIndex()
    {
        $cnt = 3;
        OrderGenerator::create($cnt);
        $response = $this->getJson(ApiRoutesProvider::orderIndex());
        $response->assertOk()
            ->assertJson(fn(AssertableJson $json) => $json->has('data.count')
                ->where('data.count', $cnt)
                ->has('data.items', $cnt, fn(AssertableJson $json) => $json
                    ->whereAllType([
                        'id' => 'integer',
                        'company_id' => 'integer',
                        'sum' => 'double',
                        'client_phone' => 'string',
                        'client_name' => 'string',
                        'lines' => 'array',
                    ]))
            );
    }

    public function testFilledValues()
    {
        $cnt = 1;
        OrderGenerator::create($cnt);
        $first = Order::first();
        $response = $this->getJson(ApiRoutesProvider::orderIndex());
        $response->assertJson(fn(AssertableJson $json) => $json
            ->has('data.items', $cnt, fn(AssertableJson $json) => $json
                ->where('id', $first->id)
                ->where('company_id', $first->company_id)
                ->where('sum', $first->sum)
                ->where('client_name', $first->client_name)
                ->where('client_phone', $first->client_phone)
                ->etc()
            ));
    }

    public function testStore()
    {
        $response = $this->postJson(ApiRoutesProvider::orderStore(), $this->data);
        $response
            ->assertCreated()
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'company_id',
                    'sum',
                    'client_name',
                    'client_phone',
                    'lines',
                ]
            ])
            ->assertJsonFragment([
                'company_id' => $this->data['company_id'],
                'client_name' => $this->data['client_name'],
                'client_phone' => $this->data['client_phone'],
            ]);
        $this->assertDatabaseHas('orders', [
            'company_id' => $this->data['company_id'],
            'client_name' => $this->data['client_name'],
            'client_phone' => $this->data['client_phone'],
        ]);
        $this->assertDatabaseHas('order_lines', [
            'dish_id' => $this->data['lines'][0]['dish_id'],
            'quantity' => $this->data['lines'][0]['quantity'],
            'price' => Dish::find($this->data['lines'][0]['dish_id'])->price,
        ]);
    }
}
